generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id              String      @id @default(uuid())
  name            String?
  email           String      @unique
  password        String?     
  emailVerified   DateTime?
  image           String?
  role            Role        @default(USER)
  registrationDate DateTime    @default(now())
  addresses       Address[]
  accounts        Account[]
  orders          Order[]
  cart            Cart?       // Relación uno a uno con Cart

  @@index([email])
  @@index([registrationDate])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id            String    @id @default(uuid())
  name          String
  description   String?
  price         Decimal
  stock         Int
  brand         String
  views         Int       @default(0)
  discount      Decimal? 

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  specifications Json?
  categoryId    String?
  category      Category?  @relation(fields: [categoryId], references: [id])
  images        ProductImage[] 
  sizes         ProductSize[]  // Relación muchos a muchos con Size
  colors        ProductColor[] // Relación muchos a muchos con Color
  types         ProductType[]
  orders        OrderDetail[]
  cartItems     CartItem[]     // Relación inversa con CartItem

  @@index([name])
  @@index([price])
  @@index([categoryId])
}


// model ProductImage {
//   id        String   @id @default(uuid())
//   url       String
//   isMain    Boolean  @default(false)
//   isHover   Boolean  @default(false)
//   isGallery Boolean  @default(true)  // Por defecto está en galería
//   order     Int      @default(0)
//   product   Product  @relation(fields: [productId], references: [id])
//   productId String

//   @@unique([productId, isMain], name: "unique_main_image")
//   @@unique([productId, isHover], name: "unique_hover_image")
// }

enum ImageType {
  MAIN
  HOVER
  GALLERY
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  type      ImageType
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@index([productId, type])
}

model Category {
  id       String     @id @default(uuid())
  name     String     @unique
  isFeatured Boolean   @default(false)
  imageUrl   String?
  products Product[]

  @@index([name])
}

model Size {
  id        String   @id @default(uuid())
  name      String
  type      String?  // 'skate', 'clothing', 'shoes'
  products  ProductSize[] // Relación muchos a muchos con Product
}

model ProductSize {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  size      Size     @relation(fields: [sizeId], references: [id])
  sizeId    String

  @@unique([productId, sizeId])
}

model Color {
  id        String   @id @default(uuid())
  name      String 
  products  ProductColor[] // Relación muchos a muchos con Product
}

model ProductColor {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  color     Color    @relation(fields: [colorId], references: [id])
  colorId   String

  @@unique([productId, colorId])
}

model ProductType {
  id String @id @default(uuid())
  name String @unique
  products Product[]
  
  @@index([name])
}

model Cart {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique // Asegura que un usuario solo tenga un carrito
  items      CartItem[] // Relación con CartItem

  @@index([userId])
}

model CartItem {
  id         String    @id @default(uuid())
  cart       Cart      @relation(fields: [cartId], references: [id])
  cartId     String
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id       String         @id @default(uuid())
  user     User?          @relation(fields: [userId], references: [id])
  userId   String?
  date     DateTime       @default(now())
  status   OrderStatus    @default(PENDING)
  total    Decimal
  payments Payment[]
  details  OrderDetail[]

  trackingCode String?  // Código de seguimiento
  notes        String?   // Comentarios adicionales del cliente

  @@index([userId])
  @@index([date])
  @@index([status])
}

model OrderDetail {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
  unitPrice    Decimal
  total        Decimal  @default(0) // Campo adicional para el total de la línea

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id       String     @id @default(uuid())
  order    Order      @relation(fields: [orderId], references: [id])
  orderId  String
  method   PaymentMethod
  status   PaymentStatus @default(PENDING)
  date     DateTime   @default(now())

  transactionReference String? // ID de transacción del banco/PayPal/etc.

  @@index([orderId])
  @@index([status])
}

model Address {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  address     String
  city        String
  postalCode  String
  country     String

  @@index([userId])
}

enum OrderStatus {
  PENDING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CARD
  PAYPAL
  TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}